name: Deploy on k8s

on:
  workflow_dispatch:
    inputs:
      build_image:
        description: 'Build docker image'
        type: boolean
        default: true
      image_version:
        description: 'Docker image version'
        required: false
        type: string
env:
  # K8S essential
  KTX_JAR_PATH: ./frame-voice-server/build/libs/*.jar
  KTX_APP_NAME: 'frame-voice'
  KTX_IMAGE_NAME: 'frame-voice'
  KTX_SVC_PORT: '30082'
  # K8S secrets
  DB_ADDRESS: ${{ secrets.DB_ADDRESS }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_USER: ${{ secrets.DB_USER }}

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Sync repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        if: ${{ inputs.build_image }}
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make gradlew executable
        if: ${{ inputs.build_image }}Z
        run: chmod +x ./gradlew

      - name: Build with Gradle
        if: ${{ inputs.build_image }}
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./gradlew build
          mv $KTX_JAR_PATH ./docker/app.jar

      - name: Get Docker image version
        if: ${{ !inputs.image_version }}
        run: |
          CURRENT_VERSION=$(minikube kubectl -- get deployment frame-gateway -o=jsonpath='{.spec.template.spec.containers[0].image}' | cut -d ':' -f 2)
          echo "KTX_IMAGE_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Set image version
        if: ${{ inputs.image_version }}
        run: |
          echo "KTX_IMAGE_VERSION=${{ inputs.image_version }}" >> $GITHUB_ENV

      - name: Build Docker image
        if: ${{ inputs.build_image }}
        run: |
          eval $(minikube docker-env)
          docker build -t $KTX_IMAGE_NAME:$KTX_IMAGE_VERSION ./docker

      - name: Deploy to k8s
        run: |
          envsubst < ./k8s/configmap.tpl.yaml > ./k8s/configmap.yaml
          minikube kubectl -- apply -f ./k8s/configmap.yaml
          KTX_CONFIG_HASH=$(sha256sum ./k8s/configmap.yaml | cut -d ' ' -f 1)
          
          envsubst < ./k8s/deployment.tpl.yaml > ./k8s/deployment.yaml
          envsubst < ./k8s/service.tpl.yaml > ./k8s/service.yaml
          
          minikube kubectl -- apply -f ./k8s/deployment.yaml
          minikube kubectl -- apply -f ./k8s/service.yaml

      - name: Clean up workspace
        if: always()
        run: rm -rf ${{ github.workspace }}/*
